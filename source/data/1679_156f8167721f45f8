From:
osiitm_2016@googlegroups.com

To:
GIRISH RAGUVIR J cs14b059 <cs14b059@smail.iitm.ac.in>, chester
	<chetrebeiro@gmail.com>

Date:
5-9-2016

Thread ID:
156e0184f1ea76cf

Subject:
RE: Processes in multi-processor systems

Body:
b'      Is it always possible to switch out a process like this?    yes. such process migration does happen in systems. however there are considerable overheads involved. so such migration is kept minimum.    such migration is performed by the os when it finds one cpu loaded considerably more than the others.   And is there a limit on how many processes you can actually force to run on a processor?          if you did not use the sched_setaffinity then the processes will be uniformly distributed across the processors to ensure that all cpus are uniformly loaded.    since you are using sched_setaffinity, you are forcing the os to schedule processes in the cpus of your choice. thus all your processes are ending up in the same cpus.    chester   Sent from Samsung Mobile      Original message   From: GIRISH RAGUVIR J cs14b059   Date:2016/09/04 3:45 PM (GMT+05:30)   To: chester   Cc: osiitm_2016   Subject: Re: Processes in multiprocessor systems          UID PID PPID C&n;bsp; SZ RSS PSR STIME TTY&n;bsp; TIME CMD girish 14588 14404 95 1049 680 0 :36 pts/0 00:00:15 ./a.out girish 14595 14477 0 5662 2520 1 :36 pts/7 00:00:00 ps aF   As seen above, in my case, ./a.out is running in processor 0.   After running ./t, a.out is forced to migrate from processor 0 to processor 1.  UID PID PPID C&nbsp; SZ RSS PSR STIME TTY&nbsp; TIME CMD girish 14588 14404 98 1049 680 1 :36 pts/0 00:00:45 ./a.out girish 14607 14541 99 1049 644 0 :36 pts/17 00:00:02 ./t girish 14608 14477 0 5662 2660 3 :36 pts/7 00:00:00 ps aF    I have attached the program I used.    But sir, I have some doubts.  Is it always possible to switch out a process like this?   And is there a limit on how many processes you can actually force to run on a processor? I tried running 10 such programs simultaneously forcing them all to run on processor 0 and all of them did.None of these programs were forced to switch to the other processors even though the other processors were relatively free.            On Sun, Sep 4, 2016 at 1:02 PM, chester  < chetrebeiro@gmail.com   wrote:   You are almost there.   Can you modify your t.c so that it migrates the first program  ie. this program    while(1){  }  to another processor      On Sunday, September 4, 2016 at 12:42:40 AM UTC+5:30, Gowrisankar Ravichandran wrote:     Sir, did you mean to invoke the sched_setaffinity() function? I used that function in the attached file to migrate the process with PID 18792 from PSR 2 to PSR 0.  Did you mean any other method by the second hint?  On Wednesday, August 31, 2016 at 3:44:58 PM UTC+5:30, chester wrote:  Hi,  We discussed today how a process can migrate from one processor to another. Here is some experiments you can run to try out process migration.   Start with a simple program  main(){  while(1); }   Compile and execute the program in a terminal.    In another terminal, use the command ``ps aF\'\' The output will look something like this  UID PID PPID C&nbsp; SZ RSS PSR STIME TTY&nbsp; TIME CMD chester 12083 11666 99 1048 356 1 15:35 pts/17 00:00:01 ./a.out chester 12084 11912 0 5659 1288 3 15:35 pts/26 00:00:00 ps aF  The fields under PSR indicates the processor which the program is running in. In my case, ./a.out is running in processor 1.    Can you now write a program that would force this a.out process to migrate to another processor such as like this  chester@optiplex:~/tmp$ ps aF UID PID PPID C&nbsp; SZ RSS PSR STIME TTY&nbsp; TIME CMD chester 12083 11666 99 1048 356  0 chester 12125 12088 99 1047 356 1 15:39 pts/24 00:00:01  ./t chester 12126 11912 0 5659 1292 3 15:39 pts/26 00:00:00 ps aF  a.out is forced to migrate from processor 1 to processor 0 by the process ./t.    Hints (1) Use the system call sched_setaffinity (to set an affinity between a process and a processor (  pot.in/2012/02/getyourprogra mtoexecuteonspecific.html ) (2) Use the fact that when Linux finds out that one processor is overworked compared to another, it will decide to migrate a process.   Please share your solution here, if you do find out how to solve this problem.  Chester       You received this message because you are subscribed to the Google Groups &quot;osiitm_2016" group. To unsubscribe from this group and stop receiving emails from it, send an email to osiitm_2016+unsubscribe@ googlegroups.com . To post to this group, send email to  osiitm_2016@googlegroups.com .    msgid/osiitm_2016/a833c36c 2a9c4dfae976c20a3c47224% 40googlegroups.com  For more options, visit   optout .    You received this message because you are subscribed to the Google Groups &quot;osiitm_2016" group. To unsubscribe from this group and stop receiving emails from it, send an email to osiitm_2016+unsubscribe@googlegroups.com . To post to this group, send email to  osiitm_2016@googlegroups.com . To view this discussion on the web visit  %40mail.gmail.com . For more options, visit   .  osiitm_+unsubscribe@googlegroups.com osiitm_2016@googlegroups.com %40email.android.com '

